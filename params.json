{"name":"Psiturk","tagline":"A web framework for building experiments on Mechanical Turk","body":"\r\nWhat is this?\r\n============\r\n\r\nPsiTurk is an open platform for conducting custom behvioral experiments on\r\nAmazon's Mechanical Turk. \r\n\r\nIt is intended to provide most of the backend machinery necessary to run your\r\nexperiment. It uses AMT's _External Question_ HIT type, meaning that you can\r\ncollect data using any website. As long as you can turn your experiment into a\r\nwebsite, you can run it with PsiTurk!\r\n\r\nYou can direct questions to our [Q&A Google group](https://groups.google.com/d/forum/psiturk).\r\n\r\nDependencies\r\n============\r\n\r\nYou will need to use a relatively recent version of [Python\r\n2](http://python.org) with the following modules installed:\r\n\r\n * [Flask](http://flask.pocoo.org/) – A lightweight web framework.\r\n * [SQLAlchemy](http://www.sqlalchemy.org/) – A powerful SQL abstraction layer.\r\n * [Boto](https://github.com/boto/boto) – A library for interfacing with\r\n   Amazon services, including MTurk.\r\n \r\nYou can install these with the following commands:\r\n\r\n    easy_install Flask-SQLAlchemy\r\n    easy_install boto\r\n\r\nTo serve your experiment to participants online, you will need to run this code\r\nfrom a web server connected to the internet.\r\n\r\nQuick Start\r\n===========\r\n\r\nJust follow these directions to get started:\r\n\r\n1. Check out this repository in git, or download the whole thing using the\r\n   'ZIP' button near the top of this page.\r\n2. Install the dependencies. \r\n3. Sign up for an AWS account, available [here](http://aws.amazon.com/).\r\n4. Sign up for a Mechanical Turk requester account, available\r\n   [here](https://requester.mturk.com/).\r\n5. Rename the config file from `config.txt.example` to `config.txt`. Update it\r\n   with your secret AWS code.\r\n6. Making sure that the configuration file is set up to use the Amazon sandbox,\r\n   issue the following commands from the PsiTurk root folder:\r\n\r\n        python mturk/createHIT.py    # To post a HIT to the sandbox\r\n        python app.py                # To start the debugging server\r\n\r\n7. You should be ready to go! Point your browser to the [worker\r\n   sandbox](https://workersandbox.mturk.com/mturk/findhits) and try to find your\r\n   HIT.\r\n\r\n*Note*: If you are just testing the server without posting your HIT to Amazon,\r\nyou can see the experiment at the following link:\r\nhttp://localhost:5001/mturk?assignmentId=debug&hitId=debug&workerId=debug\r\n\r\n\r\nExperiment design\r\n=================\r\n\r\nWe have provided an example stroop experiment that could form the basis of your\r\nown experiment. It is a Javascript experiment, with task logic inside the\r\nparticipant's browser using Javascript code in `static/task.js`. This\r\nJavascript code works by dynamically changing the html document served to\r\nparticipants in `templates/exp.html`. PsiTurk assigns a condition and\r\ncounterbalance to each participant. These are fed into JavaScript by plugging\r\nthem into `templates/exp.html`. PsiTurk actively manages the condition and\r\ncounterbalance subjects are assigned to, helping you fill them in evenly. To\r\ntell PsiTurk how many conditions and counterbalance identities are possible in\r\nyour experiment, adust `num_conds` and `num_counters` in `config.txt`.\r\n\r\nDeployment\r\n==========\r\n\r\nConfiguration\r\n------------\r\nTo make your experiment available on the internet, you will need to make the\r\nfollowing changes to the configuration file:\r\n\r\n    host: 0.0.0.0\r\n    question_url: http://yoururl:yourport/mturk\r\n\r\nreplacing `yoururl` with the url to your surver, and `yourport` with the port\r\nyou have configured in `config.txt` (by default, 5001).\r\n\r\n\r\nServer\r\n------\r\nWe **strongly** recommend you not deploy your experiment using the debugging\r\nserver (the one you start using `python app.py`). It is not robust to failures,\r\nwhich can leave your participants stranded without a way of submitting their\r\ncompleted HITs. Additionally, if you accidentally leave debug mode on, you will\r\nexpose yourself to major security holes.\r\n\r\nAn alternative we have set up is gunicorn. You can install gunicorn using the\r\nfollowing command:\r\n\r\n    easy_install gunicorn\r\n\r\nThen simply run using:\r\n\r\n    sh run_gunicorn.sh\r\n\r\nYou can configure gunicorn in `config.txt` under `Server Parameters`.\r\n\r\nFlask apps like PsiTurk can be deployed as a CGI, fastCGI, or WSGI app on any\r\nserver system, so there are many alternative options for deployment.\r\nAdditional options for deploying Flask can be found\r\n[here](http://flask.pocoo.org/docs/deploying/).\r\n\r\nDatabase\r\n--------\r\n\r\nWe recommend using a deployment-robust database solution such as\r\n[MySQL](http://www.mysql.org) or [PostgreSQL](http://www.postgresql.org).\r\nSQLite does not allow concurrent access to the database, so if the locks work\r\nproperly, simultaneous access (say, from multiple users submitting their data\r\nat the same time) could destabilize your database. In the worst (unlikely)\r\nscenario, the database could become corrupted, resulting in data loss.\r\n\r\nInstructions for setting up a MySQL server on a Mac can be found \r\n[in the wiki](https://github.com/NYUCCL/psiTurk/wiki/Macintosh-Configuration).\r\nOther platforms, check out instructions at\r\n[mysql.org](http://dev.mysql.com/doc/refman/5.5/en//installing.html).\r\n\r\nCopyright\r\n=========\r\nYou are welcome to use this code for personal or academic uses. If you fork,\r\nplease cite the authors (Todd Gureckis and John McDonnell).\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}